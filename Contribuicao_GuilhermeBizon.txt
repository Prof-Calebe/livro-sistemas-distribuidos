Arquiteturas distribuídas:
Seus diferentes aspectos e comparação com arquiteturas centralizadas

Arquiteturas centralizadas tem a comunicação mais simples, mas podem ser limitadas em  escalabilidade e tolerância a falhas. Por outro lado, arquiteturas distribuídas, como sistemas cliente-servidor, oferecem maior flexibilidade e escalabilidade, porém enfrentam desafios na comunicação e coordenação entre os diversos componentes. Um exemplo de arquitetura distribuída é uma loja digital, como a Amazon, que utiliza essa abordagem para gerenciar suas transações, garantir a disponibilidade e aumentar a carga de trabalho de acordo com a  demanda.
A complexidade das arquiteturas distribuídas aumenta com o número de processos, exigindo um bom planejamento para garantir suas funcionalidades e um bom desempenho. No iFood, diferentes processos acontecem dentro dos pedidos, pagamentos e entregas, sendo interdependentes entre si, cada um com suas próprias funções.
Os protocolos de comunicação são cruciais para a interação entre os computadores, garantindo que todos possam trocar informações da forma mais adequada. O protocolo  HTTPS, que basicamente é o HTTP mais seguro, é um dos mais usados na web para facilitar a comunicação entre servidores e clientes, a Amazon, que foi citada anteriormente, é uma das empresas que utilizam o HTTPS.
Construir soluções eficazes depende da definição dos protocolos de comunicação adequados e da implementação de mecanismos de identificação para os processos. Usar filas de mensagens, como o Apache Kafka, para gerenciar a comunicação de serviços em uma arquitetura de microserviços é um exemplo de uma abordagem eficiente.
Mensagens bloqueantes garantem uma comunicação síncrona, mas podem gerar atrasos se o destinatário estiver ocupado. Mensagens não bloqueantes permitem comunicação assíncrona, melhorando o desempenho, mas exigindo mecanismos para garantir a consistência das informações. Em um chat, mensagens bloqueantes garantem que a entrega seja confirmada antes de prosseguir, enquanto mensagens não bloqueantes são usadas para notificações, por exemplo.
Condição de corrida ocorre quando algumas pessoas tentam acessar as mesmas informações ao mesmo tempo e o resultado da execução depende da ordem das operações. Quando não gerenciadas corretamente, podem gerar resultados inconsistentes. Em reservas de voo ou cinemas, duas pessoas tentando reservar o último assento ao mesmo tempo podem causar problemas se a condição de corrida não for tratada.
Implementar mecanismos para detectar e tratar falhas, como reprocessamento de mensagens e utilização de filas de mensagens de erro, é praticamente obrigatório para a confiabilidade do sistema. Quando se trata de pagamentos, o mecanismo para reprocessar transações falhadas e garantir que não ocorram duplicações ou perdas de dados é essencial.
Esses tópicos são alguns dos pontos de atenção e os desafios existentes para projetar e implementar sistemas distribuídos, destacando a importância de protocolos de comunicação, controle da condição de corrida e outras estratégias para desenvolver um projeto eficiente.
